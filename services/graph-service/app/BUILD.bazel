load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")

go_library(
    name = "app_lib",
    srcs = ["main.go"],
    importpath = "github.com/0x726f6f6b6965/mono-service/services/graph-service/app",
    visibility = ["//visibility:private"],
    deps = [
        "//services/graph-service/graph",
        "//services/graph-service/internal/middleware",
        "@com_github_99designs_gqlgen//graphql/handler",
        "@com_github_99designs_gqlgen//graphql/playground",
        "@com_github_go_chi_chi_v5//:chi",
        "@com_github_joho_godotenv//:godotenv",
    ],
)

go_binary(
    name = "app",
    data = ["//:env-data"],
    embed = [":app_lib"],
    goarch = "arm64",
    goos = "linux",
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
pkg_tar(
    name = "app_layer",
    srcs = [":app"],
    # If the binary depends on RUNFILES, uncomment the attribute below.
    # include_runfiles = True
)

oci_image(
    name = "image",
    base = "@distroless_static",
    entrypoint = ["/app"],
    tars = [":app_layer"],
)

oci_tarball(
    name = "tarball",
    # Use the image built for the exec platform rather than the target platform
    image = ":image",
    repo_tags = ["0x726f6f6b6965/mono-service-graph-service:v1"],
)
